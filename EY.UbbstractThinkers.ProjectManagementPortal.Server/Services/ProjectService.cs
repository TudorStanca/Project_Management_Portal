using EY.UbbstractThinkers.ProjectManagementPortal.Server.Data;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Dtos.Filters;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Exceptions;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Models;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Models.Validators.Interfaces;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Repositories;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Utils;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;

namespace EY.UbbstractThinkers.ProjectManagementPortal.Server.Services
{
    public class ProjectService : IProjectService
    {
        private readonly IProjectRepository _projectRepository;
        private readonly ITemplateRepository _templateRepository;
        private readonly AppDbContext _context;
        private readonly IProjectValidator _projectValidator;
        private readonly ITaskValidator _taskValidator;
        private readonly UserManager<User> _userManager;
        private readonly IHttpContextAccessor _accesor;
        private readonly IApprovalService _approvalService;

        public ProjectService(IProjectRepository projectRepository, ITemplateRepository templateRepository, AppDbContext context, IProjectValidator projectValidator, ITaskValidator taskValidator, UserManager<User> userManager, IHttpContextAccessor accesor, IApprovalService approvalService)
        {
            _projectRepository = projectRepository;
            _templateRepository = templateRepository;
            _context = context;
            _projectValidator = projectValidator;
            _taskValidator = taskValidator;
            _userManager = userManager;
            _accesor = accesor;
            _approvalService = approvalService;
        }

        private async Task ValidateGlobalProjectRequirements(Project project)
        {
            var owner = await _userManager.FindByIdAsync(project.OwnerId);

            if (project.OwnerId == null || owner == null)
            {
                throw new ApiException(ErrorMessageConstants.ProjectOwnerUnavailable);
            }
        }

        private async Task ValidateGlobalUserRequirements(Project project, List<string> userIds)
        {
            var loggedUser = await _userManager.FindByEmailAsync(_accesor.HttpContext.User.FindFirstValue(ClaimTypes.Email));

            if (loggedUser.Id != project.OwnerId)
            {
                throw new ApiException(ErrorMessageConstants.NotAnOwner);
            }

            foreach (var id in userIds)
            {
                if (await _userManager.FindByIdAsync(id) == null)
                {
                    throw new ApiException(ErrorMessageConstants.InexistentUser);
                }
            }
        }

        private async Task<Project> ValidateGlobalTaskRequirements(ProjectTask task)
        {
            var project = await _projectRepository.GetProject(task.ProjectUid) ?? throw new ApiException(ErrorMessageConstants.ProjectNotFoundMessage);

            if (task.StartDate < project.StartDate || (task.EndDate != null && project.EndDate != null && task.EndDate > project.EndDate))
            {
                throw new ApiException(ErrorMessageConstants.InvalidTaskTimeline);
            }

            if (task.ResourceId != null)
            {
                var resource = await _projectRepository.GetResource(task.ProjectUid, task.ResourceId);

                if (resource == null)
                {
                    throw new ApiException(ErrorMessageConstants.InvalidResource);
                }
            }

            return project;
        }

        public Task<List<Project>> GetProjects()
        {
            return _projectRepository.GetProjects();
        }

        public Task<Project> GetProject(Guid id)
        {
            return _projectRepository.GetProject(id);
        }

        public async Task<Project> SaveProject(Project project)
        {
            if (project.Uid != Guid.Empty)
            {
                throw new ApiException(ErrorMessageConstants.AutoGeneratedId);
            }

            if (project.CurrentStageUid != Guid.Empty)
            {
                throw new ApiException(ErrorMessageConstants.CurrentStageChangeError);
            }

            if (await _projectRepository.GetProjectByName(project.Name) != null)
            {
                throw new ApiException(ErrorMessageConstants.ProjectNameNotUniqueMessage);
            }

            await ValidateGlobalProjectRequirements(project);

            var projectValidationResults = _projectValidator.Validate(new ValidationContext(project));

            if (projectValidationResults.Any())
            {
                throw new ApiException(string.Join(", ", projectValidationResults));
            }

            var template = await _templateRepository.GetTemplate(project.TemplateUid) ?? throw new ApiException(ErrorMessageConstants.InexistentTemplate);

            project.Template = template;
            project.CurrentStage = template.Stages.MinBy(x => x.OrderNumber);

            await _context.Projects.AddAsync(project);
            await _context.SaveChangesAsync();

            return project;
        }

        public async Task DeleteProject(Project project)
        {

            _context.Projects.Remove(project);
            await _context.SaveChangesAsync();
        }

        public async Task<Project> UpdateProject(Guid id, Project project)
        {
            var existingProject = await _projectRepository.GetProject(id);

            if (existingProject == null)
            {
                return null;
            }

            var existingProjectByName = await _projectRepository.GetProjectByName(project.Name);

            if (existingProjectByName != null && existingProject.Uid != existingProjectByName.Uid)
            {
                throw new ApiException(ErrorMessageConstants.ProjectNameNotUniqueMessage);
            }

            if (project.CurrentStageUid == Guid.Empty || project.CurrentStageUid != existingProject.CurrentStageUid)
            {
                throw new ApiException(ErrorMessageConstants.CurrentStageChangeError);
            }

            await ValidateGlobalProjectRequirements(project);

            var projectValidationResults = _projectValidator.Validate(new ValidationContext(project));

            if (projectValidationResults.Any())
            {
                throw new ApiException(string.Join(", ", projectValidationResults));
            }

            if (project.TemplateUid != existingProject.TemplateUid)
            {
                throw new ApiException(ErrorMessageConstants.TemplateChangeError);
            }

            if (project.StartDate != existingProject.StartDate)
            {
                if (existingProject.Tasks.Any(x => x.StartDate < project.StartDate))
                {
                    throw new ApiException(ErrorMessageConstants.InvalidProjectTimeline);
                }
            }

            if (project.EndDate.HasValue && project.EndDate != existingProject.EndDate)
            {
                if (existingProject.Tasks.Any(x => x.EndDate > project.EndDate))
                {
                    throw new ApiException(ErrorMessageConstants.InvalidProjectTimeline);
                }
            }

            existingProject.Name = project.Name;
            existingProject.Description = project.Description;
            existingProject.StartDate = project.StartDate;
            existingProject.EndDate = project.EndDate;
            await _context.SaveChangesAsync();

            return project;
        }

        public async Task<Project> SaveStakeholders(Project project, List<string> stakeholderIds)
        {
            await ValidateGlobalUserRequirements(project, stakeholderIds);

            foreach (var id in stakeholderIds)
            {
                if (project.OwnerId == id)
                {
                    throw new ApiException(ErrorMessageConstants.OwnerIsStakeholder);
                }

                var stakeholderProject = new ProjectStakeholder
                {
                    ProjectId = project.Uid,
                    UserId = id
                };

                _context.ProjectStakeholders.Add(stakeholderProject);
            }

            await _context.SaveChangesAsync();

            return project;
        }

        public async Task<Project> SaveResources(Project project, List<string> resourceIds)
        {
            await ValidateGlobalUserRequirements(project, resourceIds);

            foreach (var id in resourceIds)
            {
                var stakeholderResource = new ProjectResources
                {
                    ProjectId = project.Uid,
                    UserId = id
                };

                _context.ProjectResources.Add(stakeholderResource);
            }

            await _context.SaveChangesAsync();

            return project;
        }

        public Task<List<Project>> GetProjectsVisibleToUser(string userId)
        {
            return _projectRepository.GetProjectsVisibleToUser(userId);
        }

        public async Task DeleteStakeholders(Project project, List<string> stakeholderIds)
        {
            await ValidateGlobalUserRequirements(project, stakeholderIds);

            foreach (var id in stakeholderIds)
            {
                var projectStakeholder = await _context.ProjectStakeholders.FindAsync(project.Uid, id);

                project.Stakeholders.Remove(projectStakeholder);
            }

            await _context.SaveChangesAsync();
        }

        public async Task DeleteResources(Project project, List<string> resourceIds)
        {
            await ValidateGlobalUserRequirements(project, resourceIds);

            foreach (var id in resourceIds)
            {
                var projectResources = await _context.ProjectResources.FindAsync(project.Uid, id);

                project.Resources.Remove(projectResources);
            }

            await _context.SaveChangesAsync();
        }

        public async Task AdvanceToNextStage(Guid id)
        {
            await _approvalService.SaveApprovalRequest(new ApprovalRequest() { ProjectId = id });
        }

        public Task<List<ProjectTask>> GetTasks(TaskFilter filter)
        {
            return _projectRepository.GetTasks(filter);
        }

        public Task<ProjectTask> GetTask(Guid id)
        {
            return _projectRepository.GetTask(id);
        }

        public async Task<ProjectTask> SaveTask(ProjectTask task)
        {
            if (task.Uid != Guid.Empty)
            {
                throw new ApiException(ErrorMessageConstants.AutoGeneratedId);
            }

            var taskValidationResults = _taskValidator.Validate(new ValidationContext(task));

            if (taskValidationResults.Any())
            {
                throw new ApiException(string.Join(", ", taskValidationResults));
            }

            var project = await ValidateGlobalTaskRequirements(task);

            project.Tasks.Add(task);
            await _context.SaveChangesAsync();

            return task;
        }

        public async Task DeleteTask(ProjectTask task)
        {
            _context.ProjectTasks.Remove(task);
            await _context.SaveChangesAsync();
        }

        public async Task<ProjectTask> UpdateTask(Guid id, ProjectTask task)
        {
            var existingTask = await _projectRepository.GetTask(id);

            if (existingTask == null)
            {
                return null;
            }

            if (task.ProjectUid != existingTask.ProjectUid)
            {
                throw new ApiException(ErrorMessageConstants.CantChangeProjectTask);
            }

            var taskValidationResults = _taskValidator.Validate(new ValidationContext(task));

            if (taskValidationResults.Any())
            {
                throw new ApiException(string.Join(", ", taskValidationResults));
            }

            await ValidateGlobalTaskRequirements(task);

            existingTask.Name = task.Name;
            existingTask.Description = task.Description;
            existingTask.Status = task.Status;
            existingTask.StartDate = task.StartDate;
            existingTask.EndDate = task.EndDate;
            existingTask.ResourceId = task.ResourceId;
            await _context.SaveChangesAsync();

            return task;
        }
    }
}
