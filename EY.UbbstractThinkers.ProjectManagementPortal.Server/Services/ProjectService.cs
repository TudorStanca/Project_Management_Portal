using EY.UbbstractThinkers.ProjectManagementPortal.Server.Data;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Exceptions;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Models;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Models.Validators;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Repositories;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Utils;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace EY.UbbstractThinkers.ProjectManagementPortal.Server.Services
{
    public class ProjectService : IProjectService
    {
        private readonly IRepository _repository;
        private readonly AppDbContext _context;
        private readonly IProjectValidator _projectValidator;
        private readonly ILogger<ProjectService> _logger;

        public ProjectService(IRepository repository, AppDbContext context, IProjectValidator projectValidator, ILogger<ProjectService> logger)
        {
            _repository = repository;
            _context = context;
            _projectValidator = projectValidator;
            _logger = logger;
        }

        public async Task<IEnumerable<Project>> GetProjects()
        {
            return await _repository.GetProjects();
        }

        public async Task<Project> GetProject(Guid id)
        {
            var project = await _repository.GetProject(id);

            if (project == null)
            {
                return null;
            }

            return project;
        }

        public async Task<Project> SaveProject(Project project)
        {
            if (project.Uid != Guid.Empty)
            {
                throw new ApiException(ErrorMessageConstants.AutoGeneratedId);
            }

            if (await _repository.GetProjectByName(project.Name) != null)
            {
                throw new ApiException(ErrorMessageConstants.ProjectNameNotUniqueMessage);
            }

            var projectValidationResults = _projectValidator.Validate(new ValidationContext(project));

            if (projectValidationResults.Any())
            {
                throw new ApiException(string.Join(", ", projectValidationResults));
            }

            await _context.Projects.AddAsync(project);
            await _context.SaveChangesAsync();

            return project;
        }

        public async Task DeleteProject(Project project)
        {

            _context.Projects.Remove(project);
            await _context.SaveChangesAsync();
        }

        public async Task<Project> UpdateProject(Guid id, Project project)
        {
            var existingProject = await _repository.GetProject(id);

            if (existingProject == null)
            {
                return null;
            }

            var existingProjectByName = await _repository.GetProjectByName(project.Name);

            if (existingProjectByName != null && existingProject.Uid != existingProjectByName.Uid)
            {
                throw new ApiException(ErrorMessageConstants.ProjectNameNotUniqueMessage);
            }

            var projectValidationResults = _projectValidator.Validate(new ValidationContext(project));

            if (projectValidationResults.Any())
            {
                throw new ApiException(string.Join(", ", projectValidationResults));
            }

            existingProject.Name = project.Name;
            existingProject.Description = project.Description;
            existingProject.StartDate = project.StartDate;
            existingProject.EndDate = project.EndDate;
            await _context.SaveChangesAsync();

            return project;
        }
    }
}
