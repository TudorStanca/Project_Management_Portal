using EY.UbbstractThinkers.ProjectManagementPortal.Server.Data;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Exceptions;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Models;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Models.Validators.Interfaces;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Repositories;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Services.Interfaces;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Utils;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace EY.UbbstractThinkers.ProjectManagementPortal.Server.Services
{
    public class TemplateService : ITemplateService
    {
        private readonly ITemplateRepository _templateRepository;
        private readonly AppDbContext _context;
        private readonly ITemplateValidator _templateValidator;
        private readonly IProjectRepository _projectRepository;

        public TemplateService(ITemplateRepository templateRepository, AppDbContext context, ITemplateValidator templateValidator, IProjectRepository projectRepository)
        {
            _templateRepository = templateRepository;
            _context = context;
            _templateValidator = templateValidator;
            _projectRepository = projectRepository;
        }

        public async Task<List<Stage>> GetStages()
        {
            var stages = await _templateRepository.GetStages();

            return stages.OrderBy(x => x.OrderNumber).ToList();
        }

        public Task<List<Template>> GetTemplates()
        {
            return _templateRepository.GetTemplates();
        }

        public Task<Template> GetTemplate(Guid id)
        {
            return _templateRepository.GetTemplate(id);
        }

        public async Task<Template> SaveTemplate(Template template)
        {
            if (template.Uid != Guid.Empty)
            {
                throw new ApiException(ErrorMessageConstants.AutoGeneratedId);
            }

            var allStages = await _templateRepository.GetStages();

            var validStages = allStages.Where(x => template.Stages.Select(s => s.Uid).Contains(x.Uid)).ToList();
            var inexistentStages = template.Stages.Select(x => x.Uid).Except(validStages.Select(s => s.Uid)).ToList();

            if (inexistentStages.Count != 0)
            {
                throw new ApiException(ErrorMessageConstants.InexistentStage);
            }

            template.Stages = validStages;

            var templateValidationResults = _templateValidator.Validate(new ValidationContext(template));

            if (templateValidationResults.Any())
            {
                throw new ApiException(string.Join(", ", templateValidationResults));
            }

            await _context.Templates.AddAsync(template);
            await _context.SaveChangesAsync();

            return template;
        }

        public async Task<Template> UpdateTemplate(Guid id, Template template)
        {
            var existingTemplate = await _templateRepository.GetTemplate(id);

            if (existingTemplate == null)
            {
                return null;
            }

            var allStages = await _templateRepository.GetStages();
            var validStages = allStages.Where(x => template.Stages.Select(s => s.Uid).Contains(x.Uid)).ToList();
            var inexistentStages = template.Stages.Select(x => x.Uid).Except(validStages.Select(s => s.Uid)).ToList();

            var visibleCustomFieldStages = _context.TemplateStageCustomField.Where(x => x.TemplateId == id).ToList();

            if (inexistentStages.Count != 0)
            {
                throw new ApiException(ErrorMessageConstants.InexistentStage);
            }

            template.Stages = validStages;

            var templateValidationResults = _templateValidator.Validate(new ValidationContext(template));

            if (templateValidationResults.Any())
            {
                throw new ApiException(string.Join(", ", templateValidationResults));
            }

            var projects = await _projectRepository.GetProjectsByTemplateId(id);

            //TO DO: Delete custom fields associtation instead of throwing error
            var oldStageIds = existingTemplate.Stages.Select(x => x.Uid).ToList();
            var newStageIds = template.Stages.Select(x => x.Uid).ToList();
            var removedStages = oldStageIds.Except(newStageIds).ToList();

            var usedStages = visibleCustomFieldStages.Select(x => x.StageId).Distinct().ToList();

            if (removedStages.Intersect(usedStages).Any())
            {
                throw new ApiException(ErrorMessageConstants.TemplateHasExistingCustomFields);

            }

            if (removedStages.Count != 0 && projects.Count != 0)
            {
                throw new ApiException(ErrorMessageConstants.TemplateHasExistingProjects);
            }

            existingTemplate.Name = template.Name;
            existingTemplate.Description = template.Description;
            existingTemplate.Stages = template.Stages;
            await _context.SaveChangesAsync();

            return template;
        }
    }
}
