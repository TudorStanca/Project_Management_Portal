using EY.UbbstractThinkers.ProjectManagementPortal.Server.Data;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Exceptions;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Models;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Models.Validators.Interfaces;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Repositories;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Utils;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace EY.UbbstractThinkers.ProjectManagementPortal.Server.Services
{
    public class TemplateService : ITemplateService
    {
        private readonly ITemplateRepository _templateRepository;
        private readonly AppDbContext _context;
        private readonly ITemplateValidator _templateValidator;

        public TemplateService(ITemplateRepository templateRepository, AppDbContext context, ITemplateValidator templateValidator)
        {
            _templateRepository = templateRepository;
            _context = context;
            _templateValidator = templateValidator;
        }

        public async Task<IEnumerable<Stage>> GetStages()
        {
            return await _templateRepository.GetStages();
        }

        public async Task<IEnumerable<Template>> GetTemplates()
        {
            return await _templateRepository.GetTemplates();
        }

        public async Task<Template> GetTemplate(Guid id)
        {
            return await _templateRepository.GetTemplate(id);
        }

        public async Task<Template> SaveTemplate(Template template)
        {
            if (template.Uid != Guid.Empty)
            {
                throw new ApiException(ErrorMessageConstants.AutoGeneratedId);
            }

            var existingTemplateStagesTasks = template.Stages.Select(x => _templateRepository.GetStage(x.Uid));
            var existingTemplateStages = (await Task.WhenAll(existingTemplateStagesTasks)).ToList();

            if (existingTemplateStages.Any(x => x == null))
            {
                throw new ApiException(ErrorMessageConstants.InexistentStage);
            }

            template.Stages = existingTemplateStages;

            var templateValidationResults = _templateValidator.Validate(new ValidationContext(template));

            if (templateValidationResults.Any())
            {
                throw new ApiException(string.Join(", ", templateValidationResults));
            }

            await _context.Templates.AddAsync(template);
            await _context.SaveChangesAsync();

            return template;
        }
    }
}
