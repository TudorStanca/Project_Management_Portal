using EY.David.FileImportTool.Utils;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Data;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Exceptions;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Models;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Models.Validators.Interfaces;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Repositories;
using EY.UbbstractThinkers.ProjectManagementPortal.Server.Utils;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;

namespace EY.UbbstractThinkers.ProjectManagementPortal.Server.Services
{
    public class CustomFieldService : ICustomFieldService
    {
        private readonly ICustomFieldRepository _customFieldRepository;
        private readonly ITemplateRepository _templateRepository;
        private readonly IProjectRepository _projectRepository;
        private readonly ICustomFieldValidator _customFieldValidator;
        private readonly AppDbContext _context;

        public CustomFieldService(ICustomFieldRepository customFieldRepository, ITemplateRepository templateRepository, AppDbContext context, IProjectRepository projectRepository, ICustomFieldValidator customFieldValidator)
        {
            _customFieldRepository = customFieldRepository;
            _templateRepository = templateRepository;
            _context = context;
            _projectRepository = projectRepository;
            _customFieldValidator = customFieldValidator;
        }

        public Task<CustomField> GetCustomField(Guid id)
        {
            return _customFieldRepository.GetCustomField(id);
        }

        public async Task<CustomField> SaveCustomField(CustomField customField)
        {
            if (customField.Uid != Guid.Empty)
            {
                throw new ApiException(ErrorMessageConstants.AutoGeneratedId);
            }

            var template = await _templateRepository.GetTemplate(customField.TemplateId) ?? throw new ApiException(ErrorMessageConstants.InexistentTemplate);

            var validationResults = _customFieldValidator.Validate(new ValidationContext(customField));

            if (validationResults.Any())
            {
                throw new ApiException(string.Join(", ", validationResults));
            }

            var visibleStages = _context.TemplateStage
                .Where(x => x.TemplateId == customField.TemplateId)
                .Where(x => customField.TemplateStages.Select(x => x.StageId).Contains(x.StageId))
                .ToList();

            //TO DO: Let user update custom field and delete this
            if (visibleStages.Count == 0)
            {
                throw new ApiException(ErrorMessageConstants.NoVisibleStages);
            }

            customField.Template = template;
            customField.TemplateStages = visibleStages;

            var inexistentStages = customField.TemplateStages.Select(s => s.StageId).Except(template.Stages.Select(x => x.Uid)).ToList();

            if (inexistentStages.Count != 0)
            {
                throw new ApiException(ErrorMessageConstants.InexistentStage);
            }

            await _context.CustomFields.AddAsync(customField);
            await _context.SaveChangesAsync();

            return customField;
        }

        public async Task DeleteCustomField(CustomField customField)
        {
            _context.CustomFields.Remove(customField);
            await _context.SaveChangesAsync();
        }

        public async Task<List<CustomField>> GetCustomFieldsByTemplateId(Guid id)
        {
            var template = await _templateRepository.GetTemplate(id) ?? throw new ApiException(ErrorMessageConstants.InexistentTemplate);

            var customFields = await _customFieldRepository.GetCustomFieldsByTemplateId(id);

            return customFields;
        }

        public Task<List<CustomField>> GetCustomFields()
        {
            return _customFieldRepository.GetCustomFields();
        }

        public async Task<List<CustomField>> GetCustomFieldsByProjectId(Guid id)
        {
            var project = await _projectRepository.GetProject(id) ?? throw new ApiException(ErrorMessageConstants.ProjectNotFoundMessage);

            var customFields = await _customFieldRepository.GetCustomFieldsByTemplateId(project.TemplateUid);

            var customFieldsVisibleInStage = customFields
                .Where(x => x.TemplateStages.Select(x => x.StageId).Contains(project.CurrentStageUid))
                .ToList();

            return customFieldsVisibleInStage;
        }

        public async Task SaveCustomFieldValues(List<CustomFieldValue> customFieldValues)
        {
            foreach (var customFieldValue in customFieldValues)
            {
                //TO DO: Refactor logic to avoid redundant reads
                var project = await _projectRepository.GetProject(customFieldValue.ProjectId) ?? throw new ApiException(ErrorMessageConstants.ProjectNotFoundMessage);
                var customField = await _customFieldRepository.GetCustomField(customFieldValue.CustomFieldId) ?? throw new ApiException(ErrorMessageConstants.InexistentCustomField);

                if (project.TemplateUid != customField.TemplateId)
                {
                    throw new ApiException(ErrorMessageConstants.TemplateNotMatching);
                }

                if (!customField.TemplateStages.Select(x => x.StageId).Contains(project.CurrentStageUid))
                {
                    throw new ApiException(ErrorMessageConstants.CustomFieldValueVisibleStages);
                }

                switch (customField.Type)
                {
                    case CustomFieldType.Text:
                        if (customFieldValue.Value.Length > ValidationConstants.MaxDescriptionLength)
                        {
                            throw new ApiException(ErrorMessageConstants.TextValueError);
                        }

                        break;
                    case CustomFieldType.Date:
                        if (!DateOnly.TryParseExact(customFieldValue.Value, ValidationConstants.DateFormat, CultureInfo.InvariantCulture, DateTimeStyles.None, out _))
                        {
                            throw new ApiException(ErrorMessageConstants.DateValueError);
                        }

                        break;
                }

                var existingCustomFieldValue = await _customFieldRepository.GetCustomFieldValue(customFieldValue.ProjectId, customFieldValue.CustomFieldId);

                if (existingCustomFieldValue == null)
                {
                    _context.CustomFieldValues.Add(customFieldValue);
                }
                else
                {
                    existingCustomFieldValue.Value = customFieldValue.Value;
                }
            }

            await _context.SaveChangesAsync();
        }
    }
}
